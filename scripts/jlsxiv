#!/usr/bin/env python3.4

"""Wrapper for sxiv-jkl."""

import argparse, os, sys, random
from tkinter import Tk, filedialog

__author__ = 'Jason K Lai'
__contact__ = 'http://www.jasonlai.com/'

class jlsxiv( object ):

    def __init__( self, args=None ):

        """The class constructor."""

        self.path = args.path if args is not None else None
        self.forward = args.forward if args is not None else None
        self.backward = args.backward if args is not None else None
        self.random = args.random if args is not None else None
        self.zoom = args.zoom if args is not None else None
        self.index = args.index if args is not None else None
        return

    def run( self ):

        """The main function."""

        if self.path is None: self.path = False
        if self.forward and self.backward:
            raise ValueError( 'Cannot move both forward and backwards.' )
        if (self.random and self.forward) or (self.random and self.backward):
            raise ValueError( 'Cannot move in a single direction and randomly.' )
        if self.zoom is None: self.zoom = 150

        # check if folder already defined
        if os.path.isfile( '/tmp/jlsxiv' ):
            folder = os.path.dirname( open( '/tmp/jlsxiv', 'r' ).read().rstrip() )
            if folder == '':
                folder = '/home/jason/'
        else:
            folder = '/home/jason/'
            open( '/tmp/jlsxiv', 'w' ).write( folder )

        # case where the user wants to jump directories
        origFolder = folder
        if self.forward or self.backward or self.random:
            folder = os.path.dirname( self.path )
            self.jump_directory( folder ) 

        # case where script ran without options
        root = Tk()
        root.withdraw()
        fileTypes = [ 
            ( 'Image Files', ( '*.jpg', '*.JPG', '*.jpeg', '*.JPEG', '*.png', '*.PNG', '*.gif', '*.GIF', '*.tif', '*.TIF', '*.tiff', '*.TIFF', '*.bmp', '*.BMP' ) ),
            ( 'All Files', '*.*' ), ( 'JPG', '*.jpg' ), ( 'PNG', '*.png' ), ( 'TIFF', '*.tif' ), ( 'BMP', '*.bmp' ), ( 'GIF', '*.gif' ) ]
        fileName = filedialog.askopenfilename( defaultextension='Image Files', filetypes=fileTypes, initialdir=folder, initialfile=folder )

        # case where a legitimate file is selected
        if len( fileName ) > 1:
            folder = os.path.dirname( fileName ) + '/'
            dirList = sorted( [ s for s in os.listdir( folder ) if s.rpartition( '.' )[ 2 ] in 
                ( 'jpg', 'JPG', 'jpeg', 'JPEG', 'png', 'PNG', 'gif', 'GIF',
                  'tif', 'TIF', 'tiff', 'TIFF', 'bmp', 'BMP' ) ] )
            fileNumber = dirList.index( os.path.basename( fileName ) ) + 1
            open( '/tmp/jlsxiv', 'w' ).write( folder )
            os.system( '/usr/bin/find "' + folder + '/"*.{jpg,JPG,jpeg,JPEG,png,PNG,gif,GIF,tif,TIF,tiff,TIFF,bmp,BMP} ' +
                '-type f -exec /usr/local/bin/sxiv -b -n ' + str(fileNumber) + ' -z 150 {} +' )

        elif not self.index is None:
            open( '/tmp/jlsxiv', 'w' ).write( origFolder + '/' )
            os.system( '/usr/bin/find "' + origFolder + '/"*.{jpg,JPG,jpeg,JPEG,png,PNG,gif,GIF,tif,TIF,tiff,TIFF,bmp,BMP} ' +
                '-type f -exec /usr/local/bin/sxiv -b -n ' + str(self.index) + '-z 150 {} +' )

        # case where a jump is expected
        elif folder and (self.forward or self.backward or self.random):
            open( '/tmp/jlsxiv', 'w' ).write( origFolder + '/' )
            os.system( '/usr/bin/find "' + origFolder + '/"*.{jpg,JPG,jpeg,JPEG,png,PNG,gif,GIF,tif,TIF,tiff,TIFF,bmp,BMP} ' +
                '-type f -exec /usr/local/bin/sxiv -b -z 150 {} +' )

        # what does this cover?
        else:
            pass

        return

    def jump_directory( self, folder ):

        """ Function for changing directories in a given direction. """

        origFolder = folder
        jumpFolder = folder
        
        dirList = sorted( os.listdir( os.path.dirname( folder ) ) )
        for i in range( len( dirList ) ):
            if str( dirList[ i ] ) == str( os.path.basename( folder ) ):
                break
        
        if self.forward and i < len( dirList ) - 1:
            jumpFolder = os.path.dirname( folder ) + '/' + dirList[ i + 1 ] + '/'
        elif self.backward and i > 0:
            jumpFolder = os.path.dirname( folder ) + '/' + dirList[ i - 1 ] + '/'
        elif self.random:
            jumpFolder = os.path.dirname( folder ) + '/' + random.choice( dirList ) + '/'
        else:
            jumpFolder = os.path.dirname( folder ) + '/' + dirList[ i ] + '/'

        if not os.path.isdir( jumpFolder ):
            jumpFolder = folder + '/'
        
        validFolder = False
        for folderFile in os.listdir( jumpFolder ):
            if folderFile.lower().endswith(
                    ( '.jpg', '.JPG', '.jpeg', '.JPEG',
                      '.png', '.PNG', '.gif', '.GIF',
                      '.tif', '.TIF', '.tiff', '.TIFF',
                      '.bmp', '.BMP' ) ):
                validFolder = True
                break

        if not validFolder:
            folder = jumpFolder
        else:
            dirList = sorted( os.listdir( jumpFolder ) )
            open( '/tmp/jlsxiv', 'w' ).write( jumpFolder )
            os.system( '/usr/bin/find "' + jumpFolder + '"* -type f -exec /usr/local/bin/sxiv -b -z ' + str(self.zoom) + ' {} +' )
            sys.exit()

        return

if __name__ == '__main__':

    parser = argparse.ArgumentParser( description=__doc__ )

    # command line option flags
    parser.add_argument( '-p', '--path', dest='path', required=False, help='specify the current path (may include the filename)', type=str )
    parser.add_argument( '-f', '--forward', dest='forward', required=False, help='jump forward a directory', action='store_true' )
    parser.add_argument( '-b', '--backward', dest='backward', required=False, help='jump backward a directory', action='store_true' )
    parser.add_argument( '-r', '--random', dest='random', required=False, help='jump to a random directory', action='store_true' )
    parser.add_argument( '-i', '--index', dest='index', required=False, help='define the starting index (optional)', type=int )
    parser.add_argument( '-z', '--zoom', dest='zoom', required=False, help='define the zoom of sxiv (optional)', default=150, type=int )

    # command line execution
    main = jlsxiv( args=parser.parse_args() )
    main.run()
    sys.exit() # needed since calling external program
